-- Creating a table RD_TEST where first 10 rows of data from will be duplicated.

CREATE OR REPLACE PACKAGE RD_PACK
IS
  PROCEDURE RD_INS(
      ERRBUF OUT VARCHAR2,
      RETCODE OUT NUMBER );
  PROCEDURE RD_PRINT(
      ERRBUF OUT VARCHAR2,
      RETCODE OUT NUMBER,
      P_SEGMENT1 IN RD_TEST.SEGMENT1%TYPE );
  PROCEDURE MAIN(
      ERRBUF OUT VARCHAR2,
      RETCODE OUT NUMBER,
      P_SEGMENT1 IN RD_TEST.SEGMENT1%TYPE
      );
END RD_PACK;
------------------------------------------------------------------
CREATE OR REPLACE PACKAGE BODY RD_PACK
AS -- PROCEDURE TO INSERT VALUES
  PROCEDURE RD_INS(
     ERRBUF OUT VARCHAR2,
     RETCODE OUT NUMBER 
      )
  IS
    CURSOR INS_CUR
    IS
      SELECT 
        PHA.PO_HEADER_ID,
        PHA.AGENT_ID,
        PHA.TYPE_LOOKUP_CODE,
        PHA.LAST_UPDATE_DATE,
        PHA.LAST_UPDATED_BY,
        PHA.SEGMENT1,
        PHA.SUMMARY_FLAG,
        PHA.ENABLED_FLAG,
        PHA.STYLE_ID,
        PLA.PO_LINE_ID,
        PLA.LINE_TYPE_ID,
        PLA.LINE_NUM
      FROM PO_HEADERS_ALL PHA,
        PO_LINES_ALL PLA
      WHERE PHA.PO_HEADER_ID = PLA.PO_HEADER_ID
      AND ROWNUM < 11;      
  BEGIN
    FOR i IN INS_CUR
    LOOP
      BEGIN
        INSERT
        INTO RD_TEST
          (
            PO_HEADER_ID,
            AGENT_ID,
            TYPE_LOOKUP_CODE,
            LAST_UPDATE_DATE,
            LAST_UPDATED_BY,
            SEGMENT1,
            SUMMARY_FLAG,
            ENABLED_FLAG,
            STYLE_ID,
            PO_LINE_ID,
            LINE_TYPE_ID,
            LINE_NUM
          )
          VALUES
          (
            i.PO_HEADER_ID,
            i.AGENT_ID,
            i.TYPE_LOOKUP_CODE,
            i.LAST_UPDATE_DATE,
            i.LAST_UPDATED_BY,
            i.SEGMENT1,
            i.SUMMARY_FLAG,
            i.ENABLED_FLAG,
            i.STYLE_ID,
            i.PO_LINE_ID,
            i.LINE_TYPE_ID,
            i.LINE_NUM     );
-- EXCEPTION HANDLING   
  EXCEPTION
  WHEN OTHERS THEN
  FND_FILE.PUT_LINE(FND_FILE.LOG,'Error Message :' || SQLERRM);
  END;  
   COMMIT;
    END LOOP;
  EXCEPTION
  WHEN OTHERS THEN
  FND_FILE.PUT_LINE(FND_FILE.LOG,'Error Message :' || SQLERRM);
  COMMIT;
END RD_INS;
-----------------------------------------------------------------------------
PROCEDURE RD_PRINT(
      ERRBUF OUT VARCHAR2,
      RETCODE OUT NUMBER,
      P_SEGMENT1 IN RD_TEST.SEGMENT1%TYPE
      )
IS 
    CURSOR PRINT_CUR
    IS 
    SELECT * 
    FROM RD_TEST 
     WHERE SEGMENT1 = P_SEGMENT1
     ; 
    PRINT_REC PRINT_CUR%ROWTYPE;
BEGIN 
      OPEN PRINT_CUR;
       FND_FILE.PUT_LINE(FND_FILE.OUTPUT,'------------START OF DETAILS-------------');
--       FND_FILE.PUT_LINE(FND_FILE.OUTPUT, 'PO_HEADER_ID'||' '||'AGENT_ID'||' '||'TYPE_LOOKUP_CODE' ||' '||'LAST_UPDATE_DATE'||' '||'LAST_UPDATED_BY'||' '||'SEGMENT1'||' '||'SUMMARY_FLAG'||' '||'ENABLED_FLAG'||' '||'STYLE_ID'||' '||'PO_LINE_ID'||' '||'LINE_TYPE_ID'||' '||'LINE_NUM');
LOOP
    FETCH PRINT_CUR INTO PRINT_REC;
    EXIT
  WHEN PRINT_CUR%NOTFOUND;
     FND_FILE.PUT_LINE(FND_FILE.OUTPUT, 'ITEM_NUMBER : ' || ' ' ||PRINT_REC.PO_HEADER_ID);
     FND_FILE.PUT_LINE(FND_FILE.OUTPUT, 'AGENT_ID : ' || ' ' ||PRINT_REC.AGENT_ID);
     FND_FILE.PUT_LINE(FND_FILE.OUTPUT, 'TYPE_LOOKUP_CODE : ' || ' ' ||PRINT_REC.TYPE_LOOKUP_CODE);
     FND_FILE.PUT_LINE(FND_FILE.OUTPUT, 'LAST_UPDATE_DATE : ' || ' ' ||PRINT_REC.LAST_UPDATE_DATE);
     FND_FILE.PUT_LINE(FND_FILE.OUTPUT, 'LAST_UPDATED_BY : ' || ' ' ||PRINT_REC.LAST_UPDATED_BY);
     FND_FILE.PUT_LINE(FND_FILE.OUTPUT, 'SEGMENT1 : ' || ' ' ||PRINT_REC.SEGMENT1);
     FND_FILE.PUT_LINE(FND_FILE.OUTPUT, 'SUMMARY_FLAG : ' || ' ' ||PRINT_REC.SUMMARY_FLAG);
     FND_FILE.PUT_LINE(FND_FILE.OUTPUT, 'ENABLED_FLAG : ' || ' ' ||PRINT_REC.ENABLED_FLAG);
     FND_FILE.PUT_LINE(FND_FILE.OUTPUT, 'STYLE_ID : ' || ' ' ||PRINT_REC.STYLE_ID);
     FND_FILE.PUT_LINE(FND_FILE.OUTPUT, 'PO_LINE_ID : ' || ' ' ||PRINT_REC.PO_LINE_ID);
     FND_FILE.PUT_LINE(FND_FILE.OUTPUT, 'LINE_TYPE_ID : ' || ' ' ||PRINT_REC.LINE_TYPE_ID);
     FND_FILE.PUT_LINE(FND_FILE.OUTPUT, 'LINE_NUM : ' || ' ' ||PRINT_REC.LINE_NUM); 
     FND_FILE.PUT_LINE(FND_FILE.OUTPUT, '-----------------------------------------------------'); --      FND_FILE.PUT_LINE(FND_FILE.OUTPUT, 
--      PRINT_REC.PO_HEADER_ID||' '||PRINT_REC.AGENT_ID||' '||PRINT_REC.TYPE_LOOKUP_CODE||' '||PRINT_REC.LAST_UPDATE_DATE||' '||PRINT_REC.LAST_UPDATED_BY||' '||PRINT_REC.SEGMENT1||' '||PRINT_REC.SUMMARY_FLAG||' '||PRINT_REC.ENABLED_FLAG||' '||PRINT_REC.STYLE_ID||' '||PRINT_REC.PO_LINE_ID||' '||PRINT_REC.LINE_TYPE_ID||' '||PRINT_REC.LINE_NUM);
END LOOP; 
FND_FILE.PUT_LINE(FND_FILE.OUTPUT,'-------------END OF DETAILS----------------');
FND_FILE.PUT_LINE(FND_FILE.LOG,'CONGRATULATIONS!! DATA HAS BEEN SHOWN SUCCESSFULLY. '|| SQLERRM); 
CLOSE PRINT_CUR;
   EXCEPTION
  WHEN OTHERS THEN
  FND_FILE.PUT_LINE(FND_FILE.LOG,'Error Message :' || SQLERRM); 
END RD_PRINT; 
------------------------------------------------------------
PROCEDURE MAIN(
    ERRBUF OUT VARCHAR2,
    RETCODE OUT NUMBER,
    P_SEGMENT1 IN RD_TEST.SEGMENT1%TYPE)
IS
LOG_CON RD_TEST%ROWTYPE;
BEGIN
  RD_INS(ERRBUF, RETCODE);
  BEGIN
    IF(P_SEGMENT1 = 401100) THEN
      RD_PRINT(ERRBUF, RETCODE, P_SEGMENT1);
    ELSE
      BEGIN
      SELECT * INTO LOG_CON FROM RD_TEST WHERE SEGMENT1 = P_SEGMENT1;
      EXCEPTION WHEN NO_DATA_FOUND THEN
      FND_FILE.PUT_LINE(FND_FILE.OUTPUT,'SORRY! NO DATA HAS BEEN FOUND DUE TO WRONG INPUT.');
      FND_FILE.PUT_LINE(FND_FILE.LOG,'WRONG INPUT');
      FND_FILE.PUT_LINE(FND_FILE.LOG,'HERE IS THE ERROR MESSAGE: '|| SQLERRM);
      END;
    END IF;
  END;
END MAIN;
END RD_PACK;
---------------------------------------------------------------------------- 
